name: Build backend and frontend containers and run robot tests for frontend with Docker

on:
  push:
    branches: ['development', s23-docker-compose-tests]
  pull_request:
    branches: ['development', main]

# Create env file for docker-compose to use from github secrets     
env:
  DATABASE_SERVER: ${{ secrets.DATABASE_SERVER }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  DATABASE_USER: ${{ secrets.MYSQL_USER }}
  DATABASE_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  OIDC_AUTH_BACKLINK_URL: ${{ secrets.OIDC_AUTH_BACKLINK_URL }}
  OIDC_AUTH_REDIRECT_URL: ${{ secrets.OIDC_AUTH_REDIRECT_URL }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  COMPOSE_PROJECT_NAME: ${{ secrets.COMPOSE_PROJECT_NAME }}
  TESTUSERNAME: ${{ secrets.REACT_APP_TEST_USERNAME }}
  TESTUSERNAME2: ${{ secrets.REACT_APP_TEST_USERNAME2 }}
  TESTPASSWORD: ${{ secrets.REACT_APP_TEST_PASSWORD }}
  TESTPASSWORD2: ${{ secrets.REACT_APP_TEST_PASSWORD2 }}
  REACT_APP_BACKEND_URL: ${{ secrets.GH_ACTIONS_BACKEND_URL }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - run: npm ci 
      - name: Check formatting
        run: npm run fmt:check 
        continue-on-error: true  # Continnue the tests even if there are formatting errors

      # Log in to GitHub Container Registry to be able to pull private images  
      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_ACCES_TEST_USER}} #My personal access token so not usable for long term
          password: ${{ secrets.GHCR_ACCES_TEST_TOKEN }} 

      - name: Build and run containers
        run: |
            docker-compose -f docker-compose-start-front-and-back.yml up --build -d
     
      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend service to be ready..."
          until [ "$(docker inspect -f {{.State.Health.Status}} efilibrary-backend)" == "healthy" ]; do 
            sleep 10;
            echo "Waiting for backend service...";
          done
          echo "Backend service is ready."
     
      - name: Wait for frontend to be ready
        run: |
          echo "Waiting for frontend service to be ready..."
          until [ "$(docker inspect -f {{.State.Health.Status}} frontend)" == "healthy" ]; do 
            sleep 10;
            echo "Waiting for frontend service...";
          done
          echo "Frontend service is ready."    
  
      - name: Run frontend tests
        run: docker exec frontend npm run robottests
  
      - name: Clean up
        if: always()
        run: |
          docker-compose -f docker-compose-start-front-and-back.yml down    
            