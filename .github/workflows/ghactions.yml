name: Build backend and frontend containers and run robot tests for frontend with Docker

on:
  push:
    branches: ['development', s23-docker-compose-tests]
  pull_request:
    branches: ['development']

env:
  DATABASE_SERVER: ${{ secrets.DATABASE_SERVER }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  DATABASE_USER: ${{ secrets.MYSQL_USER }}
  DATABASE_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  OIDC_AUTH_BACKLINK_URL: ${{ secrets.OIDC_AUTH_BACKLINK_URL }}
  OIDC_AUTH_REDIRECT_URL: ${{ secrets.OIDC_AUTH_REDIRECT_URL }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  COMPOSE_PROJECT_NAME: ${{ secrets.COMPOSE_PROJECT_NAME }}
  TESTUSERNAME: ${{ secrets.REACT_APP_TEST_USERNAME }}
  TESTUSERNAME2: ${{ secrets.REACT_APP_TEST_USERNAME2 }}
  TESTPASSWORD: ${{ secrets.REACT_APP_TEST_PASSWORD }}
  TESTPASSWORD2: ${{ secrets.REACT_APP_TEST_PASSWORD2 }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "DATABASE_SERVER=${{ secrets.DATABASE_SERVER }}" >> .env
          echo "DATABASE_NAME=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "DATABASE_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "OIDC_AUTH_BACKLINK_URL=${{ secrets.OIDC_AUTH_BACKLINK_URL }}" >> .env
          echo "OIDC_AUTH_REDIRECT_URL=${{ secrets.OIDC_AUTH_REDIRECT_URL }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
          echo "COMPOSE_PROJECT_NAME=${{ env.COMPOSE_PROJECT_NAME }}" >> .env
          echo "TESTUSERNAME=${{ secrets.REACT_APP_TEST_USERNAME }}" >> .env
          echo "TESTUSERNAME2=${{ secrets.REACT_APP_TEST_USERNAME }}" >> .env
          echo "TESTPASSWORD=${{ secrets.REACT_APP_TEST_PASSWORD }}" >> .env
          echo "TESTPASSWORD2=${{ secrets.REACT_APP_TEST_PASSWORD2 }}" >> .env
          echo "REACT_APP_BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_ACCES_TEST_USER}} #My personal access token so not usable for long term
          password: ${{ secrets.GHCR_ACCES_TEST_TOKEN }} 
      - name: Build and run containers
        run: |
            docker-compose -f docker-compose-test-with-backend.yml up --build -d
    
      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend service to be ready..."
          until [ "$(docker inspect -f {{.State.Health.Status}} efilibrary-backend)" == "healthy" ]; do 
            sleep 10;
            echo "Waiting for backend service...";
          done
          echo "Backend service is ready."
  
      - name: Run frontend tests
        run: |
          docker logs docker-robot -f
  
      - name: Clean up
        if: always()
        run: |
          docker-compose -f docker-compose-test-with-backend.yml down    
            
    #  - name: Build and run backend containers
    #    run: docker-compose -f docker-compose-start-backend.yml up -d
#
    #  - name: Log container status
    #    run: docker ps
#
    #  - name: Wait for Backend to be Ready
    #    run: |
    #      echo "Waiting for backend service to be ready..."
    #      success=false
    #      for i in {1..30}; do # tries 30 times at an interval of 10 seconds
    #        response=$(curl -o /dev/null -s -w "%{http_code}\n" -v http://localhost:3002/health || true)
    #        if [ "$response" = "200" ]; then
    #          echo "Backend service is ready."
    #          success=true
    #          break
    #        else
    #          echo "Attempt $i: Backend service not ready. Curl response: $response"
    #          echo "Waiting for another 10 seconds..."
    #        fi
    #        sleep 10
    #      done
    #      
    #      if [ "$success" = false ] ; then
    #        echo "Backend service did not become ready in time"
    #        exit 1
    #      fi
    #    
    #  
    #  - name: Start frontend
    #    run: docker-compose -f docker-compose-start-frontend.yml up -d
    #  
    #  - name: Install wait-on
    #    run: npm install -g wait-on
    #    
    #  - name: Wait for Frontend to be Ready
    #    run: |
    #      echo "Waiting for frontend service to be ready..."
    #      success=false
    #      for i in {1..30}; do # tries 30 times at an interval of 10 seconds
    #        response=$(curl -o /dev/null -s -w "%{http_code}\n" -v http://localhost:3000)
    #        if [ "$response" = "200" ]; then
    #          echo "Frontend service is ready."
    #          success=true
    #          break
    #        else
    #          echo "Attempt $i: Backend service not ready. Curl response: $response"
    #          echo "Waiting for another 10 seconds..."
    #        fi
    #        sleep 10
    #      done
    #      if [ "$success" = false ] ; then
    #        echo "Backend service did not become ready in time"
    #        exit 1
    #      fi
#
    #  - name: Run tests 
    #    run: docker exec -i efilibrary-frontend npm run dockertests
#
    #  - name: Clean up
    #    if: always()
    #    run: |
    #      docker-compose -f docker-compose-start-backend.yml down
    #      docker-compose -f docker-compose-start-frontend.yml down
          
          
