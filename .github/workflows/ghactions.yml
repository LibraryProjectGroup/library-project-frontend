name: Build backend and frontend containers and run robot tests for frontend with Docker

on:
  push:
    branches: ['development', s23-docker-compose-tests]
  pull_request:
    branches: ['development']

env:
  DATABASE_SERVER: ${{ secrets.DATABASE_SERVER }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  DATABASE_USER: ${{ secrets.DATABASE_USER }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  OIDC_AUTH_BACKLINK_URL: ${{ secrets.OIDC_AUTH_BACKLINK_URL }}
  OIDC_AUTH_REDIRECT_URL: ${{ secrets.OIDC_AUTH_REDIRECT_URL }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "DATABASE_SERVER=${{ env.DATABASE_SERVER }}" >> .env
          echo "DATABASE_NAME=${{ env.DATABASE_NAME }}" >> .env
          echo "DATABASE_USER=${{ env.DATABASE_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}" >> .env
          echo "OIDC_AUTH_BACKLINK_URL=${{ env.OIDC_AUTH_BACKLINK_URL }}" >> .env
          echo "OIDC_AUTH_REDIRECT_URL=${{ env.OIDC_AUTH_REDIRECT_URL }}" >> .env
          echo "MYSQL_DATABASE=${{ env.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ env.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ env.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ env.MYSQL_ROOT_PASSWORD }}" >> .env

      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_ACCES_TEST_USER}}
          password: ${{ secrets.GHCR_ACCES_TEST_TOKEN }} 
            
      - name: Build and run backend containers
        run: docker-compose -f docker-compose-start-backend.yml up --build -d

      - name: Wait for Backend Service to be healthy
        run: |
          echo "Waiting for backend service to be healthy..."
          until [ "$(docker inspect --format='{{json .State.Health.Status}}' efilibrary-backend)" == "\"healthy\"" ]; do
            sleep 10;
            echo "Waiting for backend service...";
          done
          echo "Backend service is healthy!"  
      
      - name: Build and run test container
        run: docker-compose -f docker-compose-test.yml up --build -d    

      - name: Run tests
        run: docker-compose -f docker-compose-test-with-backend.yml exec -T docker-robot npm run startserverandtest

      - name: Clean up
        if: always()
        run: |
          docker-compose -f docker-compose-test.yml down
          docker-compose -f docker-compose-start-backend.yml down
