# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Deploy frontend to staging

on:
  push:
    branches: ["development"]
  pull_request:
    branches: ["development"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/libraryprojectgroup/library-project-frontend:${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Build image
        run: docker-compose -f docker-compose-staging.yml build
      - name: Log in to the container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        run: docker-compose -f docker-compose-staging.yml push
      - name: Copy docker-compose file
        uses: appleboy/scp-action@0.1.3
        env:
          host: ${{ secrets.DEPLOYMENT_SSH_HOST }}
          username: ${{ secrets.DEPLOYMENT_SSH_USERNAME }}
          key: ${{ secrets.DEPLOYMENT_SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.DEPLOYMENT_SSH_PASSPHRASE }}
          port: ${{ secrets.DEPLOYMENT_SSH_PORT }}
          source: "docker-compose-staging.yml"
          target: "docker-compose-staging.yml"
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@v0.1.8
        env:
          host: ${{ secrets.DEPLOYMENT_SSH_HOST }}
          username: ${{ secrets.DEPLOYMENT_SSH_USERNAME }}
          key: ${{ secrets.DEPLOYMENT_SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.DEPLOYMENT_SSH_PASSPHRASE }}
          port: ${{ secrets.DEPLOYMENT_SSH_PORT }}
          envs: IMAGE_NAME
          script: docker-compose -f docker-compose-staging.yml up -d

# docker stack deploy -c <(docker-compose -f docker-compose.yml config) game --with-registry-auth
